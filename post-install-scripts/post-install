#!/bin/bash
clear
#Colors
dgrey="\033[0;34m"
port="\033[0;33m"
RED="\033[1;31m"
GREEN="\033[2;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
RED="\033[0;31m"
ENDCOLOR="\033[0m"
parent=`dirname $PWD`
grandparent=`dirname $parent`
# Absolute path to this script, e.g. /home/user/bin/foo.sh
SCRIPT=$(readlink -f "$0")
# Absolute path this script is in, thus /home/user/bin
SCRIPTPATH=$(dirname "$SCRIPT")

echo -e $RED"#################################################################"$ENDCOLOR;
echo -e $YELLOW"   ____     ___    __  ____       __  _             ____  ____"$ENDCOLOR;
echo -e $YELLOW"  / __/__  / (_)__/ / / __ \___  / /_(_)__  ___    / __ \/ __/"$ENDCOLOR;
echo -e $YELLOW" _\ \/ _ \/ / / _  / / /_/ / _ \/ __/ / _ \/ _ \  / /_/ /\ \  "$ENDCOLOR;
echo -e $YELLOW"/___/\___/_/_/\_,_/  \____/ .__/\__/_/\___/_//_/  \____/___/  "$ENDCOLOR;
echo -e $YELLOW"                         /_/                                  "$ENDCOLOR;
echo -e $RED"#################################################################"$ENDCOLOR;
echo -e $BLUE"#                                 ||"$ENDCOLOR;
echo -e $BLUE"#                                 ||_________________________/'|"$ENDCOLOR;
echo -e $BLUE"#                               _| O======/                    |"$ENDCOLOR;
echo -e $BLUE"#                              |_|               ============  |"$ENDCOLOR;
echo -e $BLUE"#                                |  __   ______________________|"$ENDCOLOR;
echo -e $BLUE"#                                |_/  )  (    |___||     O-   /"$ENDCOLOR;
echo -e $BLUE"#  C a r p e   O m n i o u s          (  )    /  / |_________/"$ENDCOLOR;
echo -e $BLUE"#                                     (  )   /  /    | ) |   |"$ENDCOLOR;
echo -e $BLUE"#                                     (__)  /  /     \___|__("$ENDCOLOR;
echo -e $BLUE"#                                          /  /          )   \ "$ENDCOLOR;
echo -e $BLUE"#                                         /  /            )   \ "$ENDCOLOR;
echo -e $BLUE"#                                        /  /              )___\ "$ENDCOLOR;
echo -e $BLUE"#                                       /  / "$ENDCOLOR;
echo -e $BLUE"#                                      /__/"$ENDCOLOR;
echo -e $BLUE"#                                "$ENDCOLOR;
echo ""
echo -e $YELLOW"Thank you for choosing SolidOptionOS!"$ENDCOLOR;
echo ""
echo -e $YELLOW"This is a post installation script designed for the optionZ3ro drive or downloaded OS"$ENDCOLOR;
echo -e $YELLOW" you either purchased or downloaded online to give you a simpler, more robust user experience with the OS and its tools."$ENDCOLOR;

echo -e $YELLOW"Let's get started"$ENDCOLOR;
echo ""
echo ""

echo -e $YELLOW"Please set your home path (leave out trailing /'s): [$grandparent] "$ENDCOLOR;
read HOMEPATH
echo ""
echo -e $BLUE"Your home path is set to $HOMEPATH/."$ENDCOLOR;
echo ""
echo -e $YELLOW"Copy optionZ3ro into $HOMEPATH? "$ENDCOLOR;
read cpoption

if [[ $cpoption = 'Y' || $cpoption = 'y' ]]; then

  echo -e $BLUE"Copying optionZero folder to $HOMEPATH.."$ENDCOLOR;
  echo ""
  sudo cp -rf $parent $HOMEPATH
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi

echo -e $BLUE"Do you want to add custom alias to your bashrc? https://www.corporationwiki.com/p/2icpk6/stephen-earnhart[y/n] "$ENDCOLOR;

read ADDALIASES

if [[ $ADDALIASES = 'y' || $ADDALIASES = 'Y' ]] ; then
	
  echo ""
  echo -e $BLUE"Adding aliases to .bashrc.."$ENDCOLOR;
  echo ""
  echo ""
  echo "alias ll='ls -Al'" >> $HOMEPATH/.bashrc
  echo "alias lz='ls -Zla'" >> $HOMEPATH/.bashrc
  echo "alias xclip='xclip -selection c'" >> $HOMEPATH/.bashrc
  echo "alias goto-optionZ3ro='cd $HOMEPATH/optionZ3ro/'" >> $HOMEPATH/.bashrc
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi

nemanage_default="Y"
read -p "Do you want to install Network-Manager and configure the interfaces for easy ifup ifdown? [$netmanage_default,n] " netmanage_default
netmanage=${netmanage:-$netmanage_default}

if [[ $netmanage = "$netmanage_default" || $netmanage = "y" ]] ; then

  echo -e $BLUE"Installing Network-Manager.."$ENDCOLOR;
  echo ""
  sudo apt-get install network-manager -y
  echo ""
	
  echo -e $BLUE"Modifying NetworkManager.conf to allow for managed interfaces.."$ENDCOLOR;
  echo ""
  echo ""
  sudo sed -i 's/false/true/g' /etc/NetworkManager/NetworkManager.conf
  echo ""
	
  cat /etc/NetworkManager/NetworkManager.conf
  echo ""
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi

echo -e $YELLOW"Do you want to add Kali-Rolling to your sources? [y/n]"$ENDCOLOR;

read KALIROLLING

if [[ $KALIROLLING = 'y' || $KALIROLLING = 'Y' ]] ; then

  echo ""
  echo -e $BLUE"Checking sources.list.."$ENDCOLOR;
  echo "" 
  echo ""
  cat /etc/apt/sources.list
  echo ""
  echo ""
	
  echo -e $BLUE"Backing up original sources.list file in $HOMEPATH/backup.."$ENDCOLOR;
  echo ""
  echo ""
  sudo mkdir -p $HOMEPATH/backup/sources
  sudo cp -rf /etc/apt/ $HOMEPATH/backup/sources/
  echo -e $GREEN"The entire /etc/apt folder has been backed up to $HOMEPATH/backup/sources/"$ENDCOLOR;
  echo ""
	
  echo -e $BLUE"Updating sources.list.."$ENDCOLOR;
  echo ""
  echo ""
sudo cat << EOF > /etc/apt/sources.list
# Kali-Rolling Repos\n
deb http://repo.kali.org/kali kali-rolling main contrib non-free\n
deb-src http://repo.kali.org/kali kali-rolling main contrib non-free\n
# Kali-Dev Repos\n
deb http://repo.kali.org/kali kali-dev main contrib non-free\n
deb-src http://repo.kali.org/kali kali-dev main contrib non-free\n
# Kali-Bleeding-Edge\n
#deb http://repo.kali.org/kali kali-bleeding-edge main contrib non-free\n
#deb-src http://repo.kali.org/kali kali-bleeding-edge main contrib non-free\n
EOF
  echo ""
  echo ""

  echo -e $BLUE"Adding PGP keys.."$ENDCOLOR;
  echo ""
  echo ""
  sudo gpg –keyserver pgpkeys.mit.edu –recv-key ED444FF07D8D0BF6
  sudo gpg -a –export ED444FF07D8D0BF6| sudo apt-key add –
  echo ""
  echo -e $GREEN"PGP Keys successfully added."$ENDCOLOR;
  echo ""
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi
echo -e $YELLOW"Do you want to install and configure openssh-server? "$ENDCOLOR;
read INSTALLOPENSSH

if [[ $INSTALLOPENSSH = 'Y' || $INSTALLOPENSSH = 'y' ]]; then

  echo -e $BLUE"Installing openssh-server.."$ENDCOLOR;
  echo ""
  echo ""
  sudo apt-get update && sudo apt-get install openssh-server -y
  echo -e $GREEN"Complete."$ENDCOLOR;
  echo ""

  echo -e $BLUE"Backing up original ssh tokens.."$ENDCOLOR;
  echo ""

  if [[ ! -e /etc/ssh/oldies ]] ; then

	sudo mkdir /etc/ssh/oldies

  fi

  sudo mv /etc/ssh/ssh_host* /etc/ssh/oldies
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo ""

  echo -e $BLUE"Reconfiguring openssh-server.."$ENDCOLOR;
  echo ""
  echo ""
  sudo dpkg-reconfigure openssh-server
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo ""
  echo -e $GREEN"Success! Default ssh keys backed-up and regenerated."$ENDCOLOR;
  echo ""
  echo ""

else

  echo -e $YELLOW"Okay. maybe later."$ENDCOLOR;
  echo ""

fi

echo -e $YELLOW"Would you like to install and configure multiarch-support for i386? "$ENDCOLOR;
read MULTIARCH

if [[ $MULTIARCH = 'Y' || $MULTIARCH = 'y' ]]; then

  echo -e $BLUE"Adding multiarch-support.."$ENDCOLOR;
  echo ""
  sudo apt-get install multiarch-support -y
  echo ""

  echo -e $BLUE"Adding i386 and amd64 architectures.."$ENDCOLOR;
  echo ""
  echo ""
  sudo dpkg --add-architecture i386
  sudo dpkg --add-architecture amd64
  echo -e $GREEN"Complete."$ENDCOLOR;
  echo ""
  echo ""

else

  echo -e $YELLOW"Okay. maybe later."$ENDCOLOR;
  echo ""

fi

echo -e $YELLOW"Would you like to update and upgrade? "$ENDCOLOR;
read UPANDUP

if [[ $UPANDUP = 'Y' || $UPANDUP = 'y' ]]; then

  echo -e $BLUE"Updating and upgrading.."$ENDCOLOR;
  echo ""
  sudo dpkg --configure -a
  sudo apt-get update
  sudo apt-get -f install -y
  sudo apt-get autoremove -y
  sudo apt-get upgrade -y
  sudo apt-get dist-upgrade
  echo ""
  echo -e $GREEN"Success! Your system is now up-to-date."$ENDCOLOR;
  echo ""
  echo ""

else

  echo -e $YELLOW"Okay. maybe later."$ENDCOLOR;
  echo ""

fi

echo -e $YELLOW"Would you like to install some preferred extras? WARNING: IF YOU ARE NOT RUNNING KALI 2.0, THIS IS NOT RECOMMENDED. [y/n]"$ENDCOLOR;

read EXTRAS

if [[ $EXTRAS = 'y' || $EXTRAS = 'Y' ]] ; then
 
  echo -e $BLUE"Listing preferred extras.."$ENDCOLOR;
  echo ""
  echo -e $YELLOW"The following will be installed first:  lshw bash-completion xclip arduino lsof usbutils alsa-utils rtl-sdr rtlsdr-scanner pixiewps reaver wireshark aircrack-ng-dbgsym adb fern-wifi-cracker tor cowpatty pyrit live-build metasploit-framework ipsec-tools ghc cabal-install cabal-debian shellcheck ettercap-common ettercap-graphical nmap thc-ipv6 thc-pptp-bruter thc-ssl-dos putty putty-tools putty-doc netcat kismet ieee-data unrar unace p7zip zip unzip p7zip-full p7zip-rar file-roller filezilla filezilla-common gtk-recordmydesktop recordmydesktop remmina htop tor nethogs gdebi gpart gparted scrot lsb-release gcc g++ build-essential kbuild cmake make"$ENDCOLOR;
  echo ""
  echo -e $YELLOW"Then the following will be installed next:  firmware-ralink firmware-atheros firmware-realtek bash-completion monodevelop"$ENDCOLOR;
  echo ""
  echo -e $YELLOW"Then finally the following will be installed: flashplugin-nonfree"$ENDCOLOR;
  echo ""
  sleep 3
  echo ""

  echo -e $BLUE"Installing..."$ENDCOLOR;
  echo ""

  # Temporarily disabling linux-headers-$(uname -r) install
  # sudo apt-get install linux-headers-$(uname -r)
 
  echo ""
  sudo apt-get install lshw bash-completion xclip arduino lsof usbutils alsa-utils rtl-sdr rtlsdr-scanner pixiewps reaver wireshark aircrack-ng-dbgsym adb fern-wifi-cracker tor cowpatty pyrit live-build metasploit-framework ipsec-tools ghc cabal-install cabal-debian shellcheck ettercap-common ettercap-graphical nmap thc-ipv6 thc-pptp-bruter thc-ssl-dos putty putty-tools putty-doc netcat kismet ieee-data unrar unace p7zip zip unzip p7zip-full p7zip-rar file-roller filezilla filezilla-common gtk-recordmydesktop recordmydesktop remmina htop tor nethogs gdebi gpart gparted scrot lsb-release gcc g++ build-essential kbuild cmake make 
  echo ""
  sudo apt-get install firmware-ralink firmware-atheros firmware-realtek bash-completion monodevelop
  echo ""
  sudo apt-get install flashplugin-nonfree
  sudo update-flashplugin-nonfree --install
  echo ""
  echo -e $GREEN"Complete."$ENDCOLOR;
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi 

echo -e $YELLOW"Would you like to create a standard user? [y/n] "$ENDCOLOR;
read NEWUSER

if [[ $NEWUSER = 'y' || $NEWUSER = 'y' ]] ; then 

  echo -e $YELLOW"Username: [enter username] "$ENDCOLOR;
  read USERNAME
  echo ""
	
  echo -e $BLUE"Creating standard user, $USERNAME.."$ENDCOLOR;
  echo ""
  echo ""
  sudo useradd -m $USERNAME
  echo -e $GREEN"Complete."$ENDCOLOR;
  echo ""

  echo -e $BLUE"Creating home directories for $USERNAME..."$ENDCOLOR;
  echo ""
  sudo mkdir -p /home/$USERNAME/Downloads
  sudo mkdir -p /home/$USERNAME/Pictures
  sudo mkdir -p /home/$USERNAME/Documents
  sudo mkdir -p /home/$USERNAME/Desktop
  sudo chown -R $USERNAME:$USERNAME /home/$USERNAME
  sudo chmod -R 777 /home/$USERNAME
  echo ""

  echo -e $BLUE"Adding $USERNAME to sudo group."$ENDCOLOR;
  sudo usermod -aG sudo $USERNAME
  echo ""
	
  echo -e $BLUE"Adding $USERNAME to adm group."$ENDCOLOR;
  sudo usermod -aG adm $USERNAME
  echo ""
        
  echo -e $BLUE"Adding $USERNAME to kismet group."$ENDCOLOR;
  sudo usermod -aG kismet $USERNAME
  echo ""
	
  echo -e $BLUE"Adding $USERNAME to netdev group."$ENDCOLOR;
  sudo usermod -aG netdev $USERNAME
  echo ""
	
  echo -e $BLUE"Adding $USERNAME to root group."$ENDCOLOR;
  sudo usermod -aG root $USERNAME
  echo ""
	
  echo -e $BLUE"Adding $USERNAME to wireshark group."$ENDCOLOR;
  sudo usermod -aG wireshark $USERNAME
  echo ""

  echo -e $BLUE"Updating $USERNAME shell to /bin/bash.."$ENDCOLOR;
  sudo usermod -s /bin/bash $USERNAME
  echo ""
  echo ""

  echo -e $YELLOW"Time to set a password for $USERNAME.."$ENDCOLOR;
  echo ""
  sudo passwd $USERNAME
  echo ""
  echo ""
	
  echo -e $YELLOW"Do you want to clone root .bashrc to $USERNAME .bashrc? [y/n] "$ENDCOLOR;
  read CLONEBASHRC

  if [[ $CLONEBASHRC = 'y' || $CLONEBASHRC = 'Y' ]] ; then 
	
    echo -e $BLUE"Cloning /root/.bashrc to /home/$USERNAME/.bashrc.."$ENDCOLOR;
    echo ""
    echo -e $BLUE"Backing up first.."$ENDCOLOR; 
    echo ""
    sudo mkdir -p /home/$USERNAME
    echo ""
    sudo cp /home/$USERNAME/.bashrc /home/$USERNAME/.bashrc.bak
    echo ""
    echo -e $GREEN"Complete."$ENDCOLOR;
    echo ""
    echo -e $BLUE"Cloning.."$ENDCOLOR;
    echo ""
    sudo cp /root/.bashrc /home/$USERNAME/.bashrc
    sudo chown $USERNAME:$USERNAME /home/$USERNAME/.bashrc
    sudo chmod 777 /home/$USERNAME/.bashrc 
    echo -e $GREEN"Complete."$ENDCOLOR;
    echo ""
    echo -e $GREEN"$USERNAME Setup Complete."$ENDCOLOR;
    echo ""

  else

    echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
    echo ""
    echo ""
	
  fi

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi

echo -e $YELLOW"Would you like to install and configure add-apt-repository? "$ENDCOLOR;
read ADDAPTREPO

if [[ $ADDAPTREPO = 'Y' || $ADDAPTREPO = 'y' ]] ; then

  echo -e $BLUE"Installing and configuring add-apt-repository"$ENDCOLOR;
  echo ""
  echo ""

  echo -e $BLUE"Installing software-properties-common and apt-file.."$ENDCOLOR;
  echo ""
  echo ""
  sudo apt-get install software-properties-common apt-file -y
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo ""

  echo -e $BLUE"Running apt-file update.  This may take a while depending on your system."$ENDCOLOR;
  echo ""
  echo ""
  sudo apt-file update
  echo ""

  echo -e $GREEN"Apt-file is now up to date."$ENDCOLOR;
  echo ""
  echo ""

  echo -e $BLUE"Using apt-file search to find add-apt-repository.."$ENDCOLOR;
  sudo apt-file search add-apt-repository
  echo ""

  echo -e $BLUE"Modifying add-apt-repository with $HOMEPATH/optionZ3ro/assets/add-apt-repository in /usr/sbin.."$ENDCOLOR;
  echo ""
  sudo cp $HOMEPATH/optionZ3ro/assets/add-apt-repository /usr/sbin/add-apt-repository
  sudo chmod o+x /usr/sbin/add-apt-repository
  sudo chown root:root /usr/sbin/add-apt-repository
  echo ""
  echo -e $GREEN"Success! Add-Apt-Repository installed."$ENDCOLOR;
  echo ""
  echo ""

else

  echo -e $YELLOW"Okay. maybe later."$ENDCOLOR;
  echo ""

fi

echo -e $YELLOW"Would you like to install custom themes and icons? [y/n]"$ENDCOLOR;

read CUSTOMTHEMES

if [[ $CUSTOMTHEMES = 'y' || $CUSTOMTHEMES = 'Y' ]] ; then

  echo -e $BLUE"Adding ppa:noobslab/themes.."$ENDCOLOR;
  echo ""
  sudo /usr/sbin/add-apt-repository ppa:noobslab/themes
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo ""
  
  echo -e $BLUE"Adding ppa:alecive/antigone.."$ENDCOLOR;
  echo ""
  sudo /usr/sbin/add-apt-repository ppa:alecive/antigone
  echo ""
  echo ""

  echo -e $GREEN"Success! New themes and icons are now available."$ENDCOLOR;
  echo ""
  echo ""

else

  echo -e $BLUE"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi

echo -e $YELLOW"Would you like to modify airmon-ng to create the classic monitor interfaces like mon0 instead of the new style like wlan0mon? [y/n]"$ENDCOLOR;

read CONFAIRMON

if [[ $CONFAIRMON = 'y' || $CONFAIRMON = 'Y' ]] ; then

  echo ""
  echo -e $BLUE"Modifying airmon-ng.."$ENDCOLOR;
  echo ""
  echo ""
  sudo apt-get install --reinstall aircrack-ng
  echo ""
  echo ""
  echo -e $BLUE"Backing up airmon-ng.."$ENDCOLOR;
  echo ""

  if [[ ! -e /usr/sbin/airmon-ng-bak ]] ; then 
    
    sudo mv /usr/sbin/airmon-ng /usr/sbin/airmon-ng-bak 
    echo -e $GREEN"Done."$ENDCOLOR;
    echo ""
    echo ""

    echo -e $BLUE"Modifying airmon-ng.."$ENDCOLOR;
    echo ""
    echo ""
    sudo cp $HOMEPATH/optionZ3ro/assets/airmon-ng-old /usr/sbin/airmon-ng
    sudo chown root:root /usr/sbin/airmon-ng
    sudo chmod +x /usr/sbin/airmon-ng
    echo -e $GREEN"Done."$ENDCOLOR;
    echo ""
    echo ""	

    echo -e $GREEN"Airmon-ng successfully configured!"$ENDCOLOR;
    echo ""
    echo ""
 
  else

    echo -e $YELLOW"Maybe later."$ENDCOLOR;
    echo ""
    echo ""

  fi

else

  echo -e $YELLOW"Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi

echo ""
echo -e $YELLOW"Would you like to install screenfetch? "$ENDCOLOR;
read INSTALLSCREENFETCH

if [[ $INSTALLSCREENFETCH = 'y' || $INSTALLSCREENFETCH = 'Y' ]] ; then

  echo -e $YELLOW"Installing and setting up screenfetch.."$ENDCOLOR;
  echo ""
  echo ""

  if [[ ! -e $HOMEPATH/backup ]] ; then
    mkdir -p $HOMEPATH/backup
  fi 

  cd $HOMEPATH/backup
  echo -e $BLUE"Cloning screenFetch repository .. "$ENDCOLOR;
  echo ""
  git clone https://github.com/KittyKatt/screenFetch.git  
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo ""

  echo -e $BLUE"Adding screenfetch to /usr/local/bin.."$ENDCOLOR;
  echo ""

  if [[ ! -e /usr/local/bin/screenfetch ]] ; then 
   
    sudo mkdir -p /usr/local/bin	
    sudo cp $HOMEPATH/backup/screenFetch/screenfetch-dev /usr/local/bin/screenfetch
    echo -e $GREEN"Done."$ENDCOLOR;
    echo ""
    echo ""

    echo -e $YELLOW"Setting as executable in /usr/bin.."$ENDCOLOR;
    echo ""
    sudo chmod +x /usr/local/bin/screenfetch
    echo -e $GREEN"Done."$ENDCOLOR;
    echo ""
    echo ""
	
  fi

  echo -e $GREEN"Screenfetch setup successfully!"$ENDCOLOR;
  echo ""
  echo ""

else
  
  echo -e $BLUE"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi

echo -e $YELLOW"Woud you like to install Java SE? "$ENDCOLOR;
read INSTALLJAVA
echo ""

if [[ $INSTALLJAVA = 'y' || $INSTALLJAVA = 'Y' ]] ; then
  
  echo -e $BLUE"Downloading the Java SE JDK from SolidOptionOS server.. "$ENDCOLOR;
  echo ""

  if [[ ! -e $HOMEPATH/Downloads/jdk-7u79-linux-x64.tar.gz ]] ; then
  
    mkdir -p $HOMEPATH/Downloads		
    cd $HOMEPATH/Downloads
    wget http://solidoptionos.com/packages/jdk-7u79-linux-x64.tar.gz
    echo -e $GREEN"Download complete."$ENDCOLOR;
    echo ""
    echo ""

  else
    
    echo -e $BLUE"jdk-7u79-linux-x64.tar.gz already exists; skipping download."$ENDCOLOR;
    echo ""
    echo ""
	
  fi
	
  echo -e $BLUE"Extracting into /opt folder.."$ENDCOLOR;
  echo ""
  echo ""

  if [[ ! -e /opt/jdk1.7.0_79/ ]] ; then
    
    sudo tar -xzvf jdk-7u79-linux-x64.tar.gz -C /opt
    cd /opt/jdk1.7.0_79
    echo -e $GREEN"Done."$ENDCOLOR;
    echo ""
    echo ""
  
  else
		
    echo -e $BLUE"/opt/jdk1.7.0_79/ already exists; skipping extraction."$ENDCOLOR;
    echo ""
	
  fi

  echo -e $BLUE"Cleaning up afer installation.."$ENDCOLOR;
  echo ""
  sudo rm $HOMEPATH/Downloads/jdk-7u79-linux-x64.tar.gz*
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo ""

  echo -e $BLUE"Updating Java alternatives.."$ENDCOLOR;
  echo ""
  sudo update-alternatives --install /usr/bin/java java /opt/jdk1.7.0_79/bin/java 1
  sudo update-alternatives --install /usr/bin/javac javac /opt/jdk1.7.0_79/bin/javac 1
  sudo update-alternatives --install /usr/lib/mozilla/plugins/libjavaplugin.so mozilla-javaplugin.so /opt/jdk1.7.0_79/jre/lib/amd64/libnpjp2.so 1
  sudo update-alternatives --set java /opt/jdk1.7.0_79/bin/java
  sudo update-alternatives --set javac /opt/jdk1.7.0_79/bin/javac
  sudo update-alternatives --set mozilla-javaplugin.so /opt/jdk1.7.0_79/jre/lib/amd64/libnpjp2.so
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""
  echo ""
  echo -e $GREEN"Success! Java SE JDK Installed."$ENDCOLOR;
  echo ""
  echo ""

else

  echo -e $BLUE"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi

echo -e $YELLOW"Would you like to patch wifite with reaver and pixiewps? [y/n]"$ENDCOLOR;
read PATCHWIFITE

if [[ $PATCHWIFITE = 'y' || $PATCHWIFITE = 'Y' ]] ; then

  echo -e $YELLOW"Patching Wifite with Reaver and Pixiewps"$ENDCOLOR;
  echo ""
  echo ""

  if [[ ! -e $HOMEPATH/backup ]] ; then
    
    mkdir -p $HOMEPATH/backup
        
  fi

  echo -e $BLUE"Creating backup directory.."$ENDCOLOR;
  echo ""
  mkdir -p $HOMEPATH/backup
  sudo mkdir -p /captures/hs
  cd $HOMEPATH/backup
  echo ""
  echo ""

  echo -e $BLUE"Cloning wifite repository"$ENDCOLOR;
  echo ""
  git clone https://github.com/derv82/wifite.git
  echo ""
  echo ""

  echo -e $BLUE"Cloning wifite-mod-pixiewps repository"$ENDCOLOR;
  echo ""
  git clone https://github.com/aanarchyy/wifite-mod-pixiewps.git
  echo ""
  echo ""

  echo -e $BLUE"Cloning reaver-wps-fork-t6x repository"$ENDCOLOR;
  echo ""
  git clone https://github.com/t6x/reaver-wps-fork-t6x.git
  echo ""
	
  echo -e $BLUE"Cloning pixiewps repository"$ENDCOLOR;
  git clone https://github.com/wiire/pixiewps.git
  echo ""
  echo ""
 		
  echo -e $YELLOW"Would you like to update and upgrade before installation.. "$ENDCOLOR;
  read UPANDUP2
	
  if [[ $UPANDUP2 = 'Y' || $UPANDUP2 = 'y' ]]; then

    echo -e $BLUE"Updating and Upgrading.."$ENDCOLOR;
    echo ""
    sudo apt-get update
    sudo apt-get upgrade
    sudo apt-get dist-upgrade
    sudo apt-get -f install
    echo ""
    echo ""
	
  else

    echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
    echo ""

  fi

  echo -e $YELLOW"Would you like to install prerequisites? "$ENDCOLOR;
  read PREREQS

  if [[ $PREREQS = 'Y' || $PREREQS = 'y' ]]; then

    echo -e $BLUE"Installing prerequisites.."$ENDCOLOR;
    echo ""
    sudo apt-get install libpcap-dev aircrack-ng sqlite3 libsqlite3-dev libssl-dev -y
    echo ""
    echo ""	

  else

    echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
    echo ""

  fi

  echo -e $BLUE"Installing pixiewps.."$ENDCOLOR;
  echo ""
  cd $HOMEPATH/backup/pixiewps/src/
  make
  echo ""
  sudo make install
  echo ""
  echo ""

  echo -e $BLUE"Installing reaver-wps-fork-t6x.."$ENDCOLOR;
  echo ""
  cd $HOMEPATH/backup/reaver-wps-fork-t6x/src/
  echo ""
  echo -e $BLUE"Configuring.."$ENDCOLOR;
  echo ""
  ./configure
  echo ""
  echo -e $GREEN"Done"$ENDCOLOR;
  echo ""

  echo -e $BLUE"Compiling.."$ENDCOLOR;
  echo ""
  echo "" 
  make 
  echo ""
  echo -e $GREEN"Done"$ENDCOLOR;
  echo ""
  echo -e $BLUE"Installing .."$ENDCOLOR;
  echo ""
  echo ""
  sudo make install
  echo ""
  echo -e $GREEN"Done."$ENDCOLOR;
  echo ""

  echo -e $BLUE"Adding modified wifite and wifite-ng to /usr/bin.."$ENDCOLOR;
  echo ""	
  sudo cp $HOMEPATH/backup/wifite/wifite.py /usr/bin/wifite
  sudo chmod +x /usr/bin/wifite
  sudo cp $HOMEPATH/backup/wifite-mod-pixiewps/wifite-ng /usr/bin/wifite-ng
  sudo chmod +x /usr/bin/wifite-ng
  echo ""
 
  echo -e $BLUE"Patching wfite-ng.."$ENDCOLOR;
  echo ""
  sudo cp $HOMEPATH/optionZ3ro/assets/wifite-ng-patch /usr/bin/wifite-ng
  sudo sed -i 's/usr\/share\/wfuzz\/wordlist\/fuzzdb\/wordlists-user-passwd\/passwds\/phpbb.txt/usr\/share\/fuzzdb\/wordlists-user-passwd\/passwds\/phpbb.txt/g' /usr/bin/wifite
  sudo sed -i "s/self.WPA_HANDSHAKE_DIR \= \'hs\'/self.WPA_HANDSHAKE_DIR \= \'\/captures\/hs\'/g" /usr/bin/wifite
  sudo sed -i 's/usr\/share\/wfuzz\/wordlist\/fuzzdb\/wordlists-user-passwd\/passwds\/phpbb.txt/usr\/share\/fuzzdb\/wordlists-user-passwd\/passwds\/phpbb.txt/g' /usr/bin/wifite-ng
  sudo sed -i "s/self.WPA_HANDSHAKE_DIR \= \'hs\'/self.WPA_HANDSHAKE_DIR \= \'\/captures\/hs\'/g" /usr/bin/wifite-ng
  echo ""
  echo -e $BLUE"Adding wordlists.."$ENDCOLOR;
  cd /usr/share/
  sudo git clone https://github.com/fuzzdb-project/fuzzdb.git
  echo ""

else

  echo -e $BLUE"Okay, maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi

echo -e $YELLOW"Would you like to download SolidOptionOS artwork - Solid-Art? [y/n]"$ENDCOLOR;

read ARTWORK

if [[ $ARTWORK = 'y' || $ARTWORK = 'Y' ]] ; then
	
  echo -e $BLUE"Creating Solid-Art folder in $HOMEPATH/Pictures.."$ENDCOLOR;
  echo ""
  echo ""
	
  if [[ ! -e $HOMEPATH/Pictures/Solid-Art ]] ; then
		
    mkdir -p $HOMEPATH/Pictures/Solid-Art
    cd $HOMEPATH/Pictures/Solid-Art
    echo -e $GREEN"Done."$ENDCOLOR;
    echo ""
    echo ""
	
    echo -e $BLUE"Downloading artwork for SolidOptionOS server.."$ENDCOLOR;
    echo ""

    if [[ ! -e $HOMEPATH/Pictures/Solid-Art/art-zero.zip ]] ; then		
			
      wget http://solidoptionos.com/assets/art-zero.zip
      echo -e $GREEN"Done."$ENDCOLOR;
      echo ""
      echo ""

    else 
  
      echo -e $BLUE"Solid-Art download archive already exists."$ENDCOLOR;
      echo ""
		
    fi
                        
    echo -e $GREEN"Download Complete."$ENDCOLOR;
    echo ""
    echo ""

    echo -e $BLUE"Extracting.."$ENDCOLOR;
    echo ""
    unzip art-zero.zip
    echo -e $GREEN"Done."$ENDCOLOR;
    echo ""
    echo ""

    echo -e $BLUE"Cleaning up.."$ENDCOLOR;
    echo ""
    rm -rf __MACOSX/
    rm art-zero.zip
    chmod -R 777 *
    echo -e $GREEN"Success! Solid-Art is now available in $HOMEPATH/Pictures/Solid-Art. "$ENDCOLOR;
    echo ""
    echo ""
 
  else

    echo -e $BLUE"A Solid-Art folder already exists in $HOMEPATH/Pictures. Do you want to overwrite/merge it with a new download? "$ENDCOLOR;
    read OVERWRITEART

    if [[ $OVERWRITEART = 'y' || $OVERWRITEART = 'Y' ]] ; then
			
      sudo rm -rf $HOMEPATH/Pictures/Solid-Art/art-zero.zip
      mkdir -p $HOMEPATH/Pictures/Solid-Art
      cd $HOMEPATH/Pictures/Solid-Art
      wget http://solidoptionos.com/assets/art-zero.zip
      echo -e $GREEN"Done."$ENDCOLOR;
      echo ""
      echo ""

      echo -e $BLUE"Extracting.."$ENDCOLOR;
      echo ""
      unzip art-zero.zip
      echo -e $GREEN"Done."$ENDCOLOR;
      echo ""
      echo ""

      echo -e $BLUE"Cleaning up.."$ENDCOLOR;
      echo ""
      rm -rf __MACOSX/
      rm art-zero.zip
      chmod -R 777 *
      echo ""
      echo -e $GREEN"Success! Solid-Art has been updated to the latest version. "$ENDCOLOR;
      echo ""
 
    else
 
      echo -e $BLUE"Okay. Skipping."$ENDCOLOR;
      echo ""
      echo ""
  
    fi
       
  fi

else
  
  echo -e $BLUE"Okay. Maybe later."$ENDCOLOR;
  echo ""

fi

echo -e $YELLOW"Would you like to upgrade your htop style? [y/n] "$ENDCOLOR;
read HTOPUPGRADE

if [[ $HTOPUPGRADE = 'y' || $HTOPUPGRADE = 'Y' ]] ; then

  echo -e $BLUE"Installing htop.."$ENDCOLOR;
  echo ""
  sudo apt-get install htop -y
  echo ""
  echo -e $BLUE"Upgrading htop style.."$ENDCOLOR;
  sudo mkdir -p $HOMEPATH/.config/htop	
	
  if [[ ! -e $HOMEPATH/.config/htop ]] ; then
    
     sudo mkdir -p $HOMEPATH/.config/htop
	
  fi

  sudo cp $HOMEPATH/optionZ3ro/assets/htoprc $HOMEPATH/.config/htop/htoprc
  echo ""
  echo -e $GREEN"Success! Htop style upgraded."$ENDCOLOR;
  echo ""
  echo ""

else

  echo -e $BLUE"Okay. Maybe later."$ENDCOLOR; 
  echo ""

fi

echo -e $BLUE"Would you like to update ieee-data? This may take a long time depeding on your system. [y/n] "$ENDCOLOR;
read OUIUPDATE

if [[ $OUIUPDATE = 'y' || $OUIUPDATE = 'Y' ]] ; then

  echo -e $BLUE"Updating.."$ENDCOLOR;
  echo ""
  sudo apt-get install ieee-data
  echo "" 
  sudo update-ieee-data
  echo -e $GREEN"Update of ieee-data complete."$ENDCOLOR;
  echo ""

else

  echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
  echo ""
  echo ""

fi

echo -e $BLUE"Wrapping up the post install with necessary updates.."$ENDCOLOR;
echo ""
echo ""

echo -e $BLUE"[updatedb]"$ENDCOLOR;
echo ""
sudo updatedb

echo -e $BLUE"[updatedb.mlocate]"$ENDCOLOR;
echo ""
sudo updatedb.mlocate

echo -e $BLUE"[update-menus]"$ENDCOLOR;
echo ""
sudo update-menus

echo -e $BLUE"[update-usbids]"$ENDCOLOR;
echo ""
sudo update-usbids

echo -e $BLUE"[update-pciids]"$ENDCOLOR;
echo ""
sudo update-pciids

echo -e $BLUE"[update-initramfs -uv]"$ENDCOLOR;
echo ""
sudo update-initramfs -uv

echo -e $BLUE"[update-grub]"$ENDCOLOR;
echo ""
sudo update-grub

echo -e $BLUE"[update-grub2]"$ENDCOLOR;
echo ""
sudo update-grub2

echo -e $BLUE"Syncing.."$ENDCOLOR;
echo ""
sync

echo ""
echo -e $GREEN"Wrap up complete."$ENDCOLOR;
echo ""
echo ""
echo -e $BLUE"#################################"$ENDCOLOR;
echo -e $YELLOW"#      Operation Complete.       #"$ENDCOLOR;
echo -e $BLUE"#################################"$ENDCOLOR;
echo ""
