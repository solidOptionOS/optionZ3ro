#!/bin/bash
clear
#Colors
dgrey="\033[0;34m"
port="\033[0;33m"
RED="\033[1;31m"
GREEN="\033[2;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
RED="\033[0;31m"
ENDCOLOR="\033[0m"

echo -e $RED"#################################################################"$ENDCOLOR;
echo -e $YELLOW"   ____     ___    __  ____       __  _             ____  ____"$ENDCOLOR;
echo -e $YELLOW"  / __/__  / (_)__/ / / __ \___  / /_(_)__  ___    / __ \/ __/"$ENDCOLOR;
echo -e $YELLOW" _\ \/ _ \/ / / _  / / /_/ / _ \/ __/ / _ \/ _ \  / /_/ /\ \  "$ENDCOLOR;
echo -e $YELLOW"/___/\___/_/_/\_,_/  \____/ .__/\__/_/\___/_//_/  \____/___/  "$ENDCOLOR;
echo -e $YELLOW"                         /_/                                  "$ENDCOLOR;
echo -e $RED"#################################################################"$ENDCOLOR;
echo -e $BLUE"#                                 ||"$ENDCOLOR;
echo -e $BLUE"#                                 ||_________________________/'|"$ENDCOLOR;
echo -e $BLUE"#                               _| O======/                    |"$ENDCOLOR;
echo -e $BLUE"#                              |_|               ============  |"$ENDCOLOR;
echo -e $BLUE"#                                |  __   ______________________|"$ENDCOLOR;
echo -e $BLUE"#                                |_/  )  (    |___||     O-   /"$ENDCOLOR;
echo -e $BLUE"#  C a r p e   O m n i o u s          (  )    /  / |_________/"$ENDCOLOR;
echo -e $BLUE"#                                     (  )   /  /    | ) |   |"$ENDCOLOR;
echo -e $BLUE"#                                     (__)  /  /     \___|__("$ENDCOLOR;
echo -e $BLUE"#                                          /  /          )   \ "$ENDCOLOR;
echo -e $BLUE"#                                         /  /            )   \ "$ENDCOLOR;
echo -e $BLUE"#                                        /  /              )___\ "$ENDCOLOR;
echo -e $BLUE"#                                       /  / "$ENDCOLOR;
echo -e $BLUE"#                                      /__/"$ENDCOLOR;
echo -e $BLUE"#                                "$ENDCOLOR;
echo ""
echo -e $YELLOW"Thank you for choosing SolidOptionOS!"$ENDCOLOR;
sleep 2
echo ""
echo -e $YELLOW"This is a post installation script designed for the optionZ3ro drive or downloaded OS"$ENDCOLOR;
echo -e $YELLOW" you either purchased or downloaded online to give you a simpler, more robust user experience with the OS and its tools."$ENDCOLOR;

echo -e $YELLOW"Let's get started"$ENDCOLOR;
sleep 1
echo ""
echo -e $BLUE"Adding aliases to .bashrc.."$ENDCOLOR;
sleep 1
echo ""
echo "alias ll='ls -Al'" >> ~/.bashrc
echo "alias lz='ls -Zla'" >> ~/.bashrc
echo "alias xclip='xclip -selection c'" >> ~/.basrc
echo "goto-scripts='cd /root/optionZ3ro/scripts'" >> ~/.bashrc
echo "alias gitusername=solidOptionOS" >> ~/.bashrc
echo "screenfetch" >> ~/.bashrc
echo ""
echo -e $BLUE"NOTE: the ScreenFetch command will only work once installed"$ENDCOLOR;
echo ""
sleep 1

echo -e $BLUE"Modifying NetworkManager.conf to allow for managed interfaces.."$ENDCOLOR;
echo ""
sleep 1
sed -i 's/false/true/g' /etc/NetworkManager/NetworkManager.conf
echo ""
cat /etc/NetworkManager/NetworkManager.conf
echo ""
sleep 1
echo -e $BLUE"Checking sources.list.."$ENDCOLOR;
sleep 1 
echo ""
cat /etc/apt/sources.list
echo ""
sleep 1
echo -e $BLUE"Backing up original sources.list file in /root/backup.."$ENDCOLOR;
echo ""
sleep 1
mkdir -p /root/backup/sources
cp -rf /etc/apt/ /root/backup/sources/
echo -e $GREEN"The entire /etc/apt folder has been backed up to /root/backup/sources/"$ENDCOLOR;
echo ""
echo -e $BLUE"Updating sources.list.."$ENDCOLOR;
sleep 1
echo ""
cat << EOF > /etc/apt/sources.list
deb http://http.kali.org/kali kali-rolling main non-free contrib
EOF
echo ""
sleep 1
echo -e $BLUE"Adding PGP keys.."$ENDCOLOR;
sleep 1
echo ""
gpg –keyserver pgpkeys.mit.edu –recv-key ED444FF07D8D0BF6
gpg -a –export ED444FF07D8D0BF6| sudo apt-key add –
echo ""
echo -e $GREEN"PGP Keys successfully added."$ENDCOLOR;
sleep 1
echo ""

echo -e $BLUE"Backing up original ssh tokens.."$ENDCOLOR;
sleep 1

if [[ ! -e /etc/ssh/oldies ]] ; then
	sudo mkdir /etc/ssh/oldies
fi

mv /etc/ssh/ssh_host* /etc/ssh/oldies
echo -e $GREEN"Done."$ENDCOLOR;
echo ""
sleep 1

echo -e $BLUE"Reconfiguring openssh-server.."$ENDCOLOR;
sleep 1
sudo dpkg-reconfigure openssh-server
echo -e $GREEN"Done."$ENDCOLOR;
echo ""
sleep 1

echo -e $GREEN"Success! Default ssh keys backed-up and regenerated."$ENDCOLOR;
sleep 1
echo ""

echo -e $BLUE"Updating and upgrading.."$ENDCOLOR;
sleep 1
sudo apt-get update && sudo apt-get -f install -y  && sudo apt-get autoremove -y && sudo apt-get upgrade -y && sudo apt-get dist-upgrade
echo ""
echo -e $GREEN"Success! Your system is now up-to-date."$ENDCOLOR;
echo ""
sleep 1
echo -e $BLUE"Installing preferred extras.."$ENDCOLOR;
sleep 1
apt-get install --reinstall xclip arduino android-sdk android-libadb android-sdk-build-tools lsof usbutils alsa-utils rtl-sdr rtlsdr-scanner pixiewps reaver wireshark aircrack-ng-dbgsym adb fern-wifi-cracker linux-headers-$(uname -r) tor cowpatty pyrit live-build metasploit-framework ipsec-tools ghc cabal-install cabal-debian shellcheck ettercap-common ettercap-graphical nmap thc-ipv6 thc-pptp-bruter thc-ssl-dos putty putty-tools putty-doc netcat kismet ieee-data unrar unace p7zip zip unzip p7zip-full p7zip-rar file-roller filezilla filezilla-common gtk-recordmydesktop recordmydesktop remmina htop tor nethogs gdebi gpart gparted scrot lsb-release gcc g++ build-essential kbuild cmake make firmware-ralink firmware-atheros firmware-linux firmware-realtek multiarch-support bash-completion monodevelop -y
echo -e $GREEN"Done."$ENDCOLOR;
echo ""
sleep 1

echo -e $YELLOW"Would you like to create a standard user? [y/n] "$ENDCOLOR;
read NEWUSER

if [[ $NEWUSER = 'y' || $NEWUSER = 'y' ]] ; then 

	echo -e $YELLOW"Username: [enter username] "$ENDCOLOR;
	read USERNAME
	sleep 1
	echo ""
	echo -e $BLUE"Creating standard user, $USERNAME.."$ENDCOLOR;
	sleep 1
	echo ""
	useradd $USERNAME
	mkdir -p /home/$USERNAME/Downloads
        mkdir -p /home/$USERNAME/Pictures
        mkdir -p /home/$USERNAME/Documents
        mkdir -p /home/$USERNAME/Desktop

	chown -R $USERNAME:$USERNAME /home/$USERNAME
	chmod -R 777 /home/$USERNAME
	echo ""
	echo -e $BLUE"Adding $USERNAME to sudo group."$ENDCOLOR;
	usermod -aG sudo $USERNAME
	echo ""
	echo -e $BLUE"Adding $USERNAME to adm group."$ENDCOLOR;
	usermod -aG adm $USERNAME
	echo ""
        echo -e $BLUE"Adding $USERNAME to adm group."$ENDCOLOR;
        usermod -aG kismet $USERNAME
        echo ""
	echo -e $BLUE"Adding $USERNAME to netdev group."$ENDCOLOR;
	usermod -aG netdev $USERNAME
	echo ""
	echo -e $BLUE"Adding $USERNAME to root group."$ENDCOLOR;
	usermod -aG root $USERNAME
	echo ""
	echo -e $BLUE"Updating $USERNAME shell to /bin/bash.."$ENDCOLOR;
	usermod -s /bin/bash $USERNAME
	echo ""
	sleep 1
	echo -e $BLUE"Copying the root .bashrc to $USERNAME .bashrc.."$ENDCOLOR;
	cp /root/.bashrc /home/$USERNAME/.bashrc
	chown $USERNAME:$USERNAME /home/$USERNAME/.bashrc
	chmod 777 /home/$USERNAME/.bashrc 

	echo -e $GREEN"$USERNAME setup."$ENDCOLOR;
	sleep 1

else 

	echo -e $YELLOW"Okay. Maybe later."$ENDCOLOR;
	echo ""
	sleep 1

fi 
echo -e $BLUE"Adding aliases to .bashrc.."$ENDCOLOR;
sleep 1
echo ""
echo "alias ll='ls -Al'" >> ~/.bashrc
echo "alias lz='ls -Zla'" >> ~/.bashrc
echo "alias xclip='xclip -selection c'" >> ~/.basrc
echo "goto-scripts='cd /root/optionZ3ro/scripts'" >> ~/.bashrc
echo "alias gitusername=solidOptionOS" >> ~/.bashrc
echo "screenfetch" >> ~/.bashrc

echo -e $BLUE"Installing and configuring add-apt-repository"$ENDCOLOR;
sleep 1
echo ""
echo -e $BLUE"Installing software-properties-common and apt-file.."$ENDCOLOR;
sleep 1
apt-get install software-properties-common apt-file -y
echo -e $GREEN"Done."$ENDCOLOR;
echo ""
sleep 0.5
echo -e $BLUE"Running apt-file update (This may take a while depending on your system.).."$ENDCOLOR;
sleep 1
apt-file update
sleep 1
echo -e $GREEN"Apt-file is now up to date."$ENDCOLOR;
echo ""
sleep 1

echo -e $BLUE"Using apt-file search to find add-apt-repository.."$ENDCOLOR;
apt-file search add-apt-repository
echo ""
echo -e $BLUE"Modifying add-apt-repository with /root/optionZ3ro/scripts/assets/add-apt-repository in /usr/sbin.."$ENDCOLOR;
cp /root/optionZ3ro/scripts/assets/add-apt-repository /usr/sbin/add-apt-repository
chmod o+x /usr/sbin/add-apt-repository
chown root:root /usr/sbin/add-apt-repository
echo ""
echo -e $GREEN"Success! Add-Apt-Repository installed."$ENDCOLOR;
echo ""
sleep 1


echo -e $YELLOW"Would you like to install custom themes and icons? [y/n]"$ENDCOLOR;
read CUSTOMTHEMES
echo ""

if [[ $CUSTOMTHEMES = 'y' || $CUSTOMTHEMES = 'Y' ]] ; then

	echo -e $BLUE"Adding ppa:noobslab/themes.."$ENDCOLOR;
	sleep 1
	/usr/sbin/add-apt-repository ppa:noobslab/themes
	echo -e $GREEN"Done."$ENDCOLOR;
	echo ""
	sleep 0.5

	echo -e $BLUE"Adding ppa:alecive/antigone.."$ENDCOLOR;
	sleep 1
	/usr/sbin/add-apt-repository ppa:alecive/antigone
	echo ""
	sleep 0.5

	echo -e $GREEN"Success! New themes and icons are now available."$ENDCOLOR;
	sleep 1
	echo ""

else

	echo -e $BLUE"Okay. Maybe later."$ENDCOLOR;
	echo ""
	sleep 1
fi

echo -e $BLUE"Configuring airmon-ng.."$ENDCOLOR;
sleep 1
echo ""
echo -e $BLUE"Backing up airmon-ng.."$ENDCOLOR;
sleep 1

if [[ ! -e /usr/sbin/airmon-ng-bak ]] ; then 
	mv /usr/sbin/airmon-ng /usr/sbin/airmon-ng-bak 
	echo -e $GREEN"Done."$ENDCOLOR;
	echo ""
	sleep 1

	echo -e $BLUE"Modifying airmon-ng.."$ENDCOLOR;
	sleep 1
	echo ""
	cp /root/optionZ3ro/scripts/assets/airmon-ng-old /usr/sbin/airmon-ng
	chown root:root /usr/sbin/airmon-ng
	chmod +x /usr/sbin/airmon-ng
	echo -e $GREEN"Done."$ENDCOLOR;
	echo ""
	sleep 0.5	

	echo -e $GREEN"Airmon-ng successfully configured!"$ENDCOLOR;
	echo ""
	sleep 1
fi
echo ""
sleep 1
echo -e $BLUE"Adding architectures .."$ENDCOLOR;
sleep 1
echo ""
dpkg --add-architecture i386
dpkg --add-architecture amd64
echo -e $GREEN"Architectures updated."$ENDCOLOR;
sleep 1
echo ""
echo -e $YELLOW"Would you like to install screenfetch? "$ENDCOLOR;
read INSTALLSCREENFETCH
echo ""

if [[ $INSTALLSCREENFETCH = 'y' || $INSTALLSCREENFETCH = 'Y' ]] ; then

	echo -e $YELLOW"Installing and setting up screenfetch.."$ENDCOLOR;
	sleep 1
	echo ""

	if [[ ! -e /tmp ]] ; then
		mkdir /tmp
	fi 

	cd /tmp
	echo -e $BLUE"Cloning screenFetch repository .. "$ENDCOLOR;
	sleep 1
	git clone https://github.com/KittyKatt/screenFetch.git  
	echo -e $GREEN"Done."$ENDCOLOR;
	echo ""
	sleep 1

	echo -e $BLUE"Adding screenfetch to /usr/local/bin.."$ENDCOLOR;
	sleep 1

	if [[ ! -e /usr/local/bin/screenfetch ]] ; then 
		sudo cp /tmp/screenFetch/screenfetch-dev /usr/local/bin/screenfetch
		echo -e $GREEN"Done."$ENDCOLOR;
		echo ""
		sleep 0.5

		echo -e $YELLOW"Setting as executable in /usr/bin.."$ENDCOLOR;
		sleep 1
		chmod +x /usr/local/bin/screenfetch
		echo -e $GREEN"Done."$ENDCOLOR;
		echo ""
		sleep 1
	fi

	echo -e $GREEN"Screenfetch setup successfully!"$ENDCOLOR;
	sleep 1
	echo ""
else
	echo -e $BLUE"Okay. Maybe later."$ENDCOLOR;
	echo ""
	sleep 1
fi

echo -e $YELLOW"Woud you like to install Java SE? "$ENDCOLOR;
read INSTALLJAVA
echo ""

if [[ $INSTALLJAVA = 'y' || $INSTALLJAVA = 'Y' ]] ; then

	echo -e $BLUE"Downloading the Java SE JDK from SolidOptionOS server.. "$ENDCOLOR;
	sleep 1

	if [[ ! -e /root/Downloads/jdk-7u79-linux-x64.tar.gz ]] ; then
		
		cd /root/Downloads
		wget http://solidoptionos.com/packages/jdk-7u79-linux-x64.tar.gz
		echo -e $GREEN"Download complete."$ENDCOLOR;
		echo ""
		sleep 1

	else
		echo -e $BLUE"jdk-7u79-linux-x64.tar.gz already exists; skipping download."$ENDCOLOR;
		sleep 1
		echo ""
	fi
	
	echo -e $BLUE"Extracting into /opt folder.."$ENDCOLOR;
	echo ""
	sleep 1

	if [[ ! -e /opt/jdk1.7.0_79/ ]] ; then
		tar -xzvf jdk-7u79-linux-x64.tar.gz -C /opt
		cd /opt/jdk1.7.0_79
		echo -e $GREEN"Done."$ENDCOLOR;
		echo ""
		sleep 1
	else
		echo -e $BLUE"/opt/jdk1.7.0_79/ already exists; skipping extraction."$ENDCOLOR;
		sleep 1
	fi

	echo -e $BLUE"Cleaning up afer installation.."$ENDCOLOR;
	sleep 1
	rm /root/Downloads/jdk-7u79-linux-x64.tar.gz*
	echo -e $GREEN"Done."$ENDCOLOR;
	echo ""
	sleep 1

	echo -e $BLUE"Updating Java alternatives.."$ENDCOLOR;
	sleep 1
	update-alternatives --install /usr/bin/java java /opt/jdk1.7.0_79/bin/java 1
	update-alternatives --install /usr/bin/javac javac /opt/jdk1.7.0_79/bin/javac 1
	update-alternatives --install /usr/lib/mozilla/plugins/libjavaplugin.so mozilla-javaplugin.so /opt/jdk1.7.0_79/jre/lib/amd64/libnpjp2.so 1
	update-alternatives --set java /opt/jdk1.7.0_79/bin/java
	update-alternatives --set javac /opt/jdk1.7.0_79/bin/javac
	update-alternatives --set mozilla-javaplugin.so /opt/jdk1.7.0_79/jre/lib/amd64/libnpjp2.so
	echo -e $GREEN"Done."$ENDCOLOR;
	echo ""
	sleep 0.5
	echo -e $GREEN"Success! Java SE JDK Installed."$ENDCOLOR;
	sleep 1
	echo ""

else

	echo -e $BLUE"Okay. Maybe later."$ENDCOLOR;
	sleep 1
	echo ""

fi

echo -e $YELLOW"Would you like to patch wifite with reaver and pixiewps? [y/n]"$ENDCOLOR;
read PATCHWIFITE
echo ""

if [[ $PATCHWIFITE = 'y' || $PATCHWIFITE = 'Y' ]] ; then

	echo -e $YELLOW"Patching Wifite with Reaver and Pixiewps"$ENDCOLOR;
	sleep 1
	echo ""

	if [[ ! -e /root/backup ]] ; then
                mkdir /root/backup
        fi

	echo -e $BLUE"Creating backup directory.."$ENDCOLOR;
	echo ""
	cd /root/backup
	echo ""
	sleep 1

	echo -e $BLUE"Cloning wifite repository"$ENDCOLOR;
	echo ""
	git clone https://github.com/derv82/wifite.git
	echo ""
	sleep 1

	echo -e $BLUE"Cloning wifite-mod-pixiewps repository"$ENDCOLOR;
	echo ""
	git clone https://github.com/aanarchyy/wifite-mod-pixiewps.git
	echo ""
	sleep 1

	echo -e $BLUE"Cloning reaver-wps-fork-t6x repository"$ENDCOLOR;
	echo ""
	git clone https://github.com/t6x/reaver-wps-fork-t6x.git
	echo ""
	
	echo -e $BLUE"Cloning pixiewps repository"$ENDCOLOR;
	git clone https://github.com/wiire/pixiewps.git
	echo ""
	sleep 1
	
	echo -e $BLUE"Updating and upgrading before installation.."$ENDCOLOR;
	echo ""
	apt-get update && apt-get upgrade -y && apt-get dist-upgrade -y && apt-get -f install -y
	echo ""
	sleep 1
	
	echo -e $BLUE"Installing prerequisites.."$ENDCOLOR;
	echo ""
	sudo apt-get install --reinstall libpcap-dev aircrack-ng sqlite3 libsqlite3-dev libssl-dev -y
	echo ""
	sleep 1	

	echo -e $BLUE"Installing pixiewps.."$ENDCOLOR;
	echo ""
	cd /root/backup/pixiewps/src/
	make
	sleep 1
	echo ""
	make install
	echo ""
	sleep 1

	echo -e $BLUE"Installing reaver-wps-fork-t6x.."$ENDCOLOR;
	echo ""
	cd /root/backup/reaver-wps-fork-t6x/src/
	echo ""
	echo -e $BLUE"Configuring.."$ENDCOLOR;
	sleep 1
	./configure
	sleep 1
	echo -e $GREEN"Done"$ENDCOLOR;
	echo ""

	echo -e $BLUE"Compiling.."$ENDCOLOR;
	sleep 1
	echo "" 
	make 
	sleep 1
        echo -e $GREEN"Done"$ENDCOLOR;
        echo ""
	echo -e $BLUE"Installing .."$ENDCOLOR;
	sleep 1
	echo ""
	make install
	sleep 1
	echo -e $GREEN"Done."$ENDCOLOR;
	echo ""

	echo -e $BLUE"Adding modified wifite and wifite-ng to /usr/bin.."$ENDCOLOR;
	sleep 1	
	cp /root/backup/wifite/wifite.py /usr/bin/wifite
	chmod +x /usr/bin/wifite
	cp /root/backup/wifite-mod-pixiewps/wifite-ng /usr/bin/wifite-ng
	chmod +x /usr/bin/wifite-ng
	echo ""
 else
	echo -e $BLUE"Okay, maybe some other time."$ENDCOLOR;
fi

echo -e $YELLOW"Would you like to download SolidOptionOS artwork - Solid-Art? [y/n]"$ENDCOLOR;
read ARTWORK
echo ""

if [[ $ARTWORK = 'y' || $ARTWORK = 'Y' ]] ; then
	
	echo -e $BLUE"Creating Solid-Art folders in /root/Pictures.."$ENDCOLOR;
	sleep 1
	echo ""
	if [[ ! -e /root/Pictures/Solid-Art ]] ; then
		mkdir /root/Pictures/Solid-Art
                cd /root/Pictures/Solid-Art
                echo -e $GREEN"Done."$ENDCOLOR;
                echo ""
                sleep 0.5
	
		echo -e $BLUE"Downloading artwork for SolidOptionOS server.."$ENDCOLOR;
		sleep 1

		if [[ ! -e /root/Pictures/Solid-Art/archive.zip ]] ; then		
			wget http://solidoptionos.com/pics/archive.zip
			echo -e $GREEN"Done."$ENDCOLOR;
			echo ""
			sleep 0.5
		else 
			echo -e $BLUE"Solid-Art download archive already exists."$ENDCOLOR;
			sleep 1
		fi
                        
		wget http://solidoptionos.com/pics/archive.zip
                echo -e $GREEN"Done."$ENDCOLOR;
		echo ""
		sleep 1

                echo -e $BLUE"Extracting.."$ENDCOLOR;
                sleep 1
		unzip archive.zip
                echo -e $GREEN"Done."$ENDCOLOR;
                echo ""
                sleep 0.5

                echo -e $BLUE"Cleaning up.."$ENDCOLOR;
                sleep 1
		rm -rf __MACOSX/
                cp -rf hacker_wallpaper/ .
                rm -rf hacker_wallpaper/
                cp -rf epic-grunge-wall-texture-by-GR/ .
                rm -rf epic-grunge-wall-texture-by-GR/
                rm *.psd
                rm *.pdf
                rm *.ai
                rm archive.zip*
		chmod -R 777 *
		echo -e $GREEN"Success! Solid-Art is now available in ~/Pictures/Solid-Art. "$ENDCOLOR;
		sleep 1
		echo ""
 
	else

		echo -e $BLUE"A Solid-Art folder already exists in /root/Pictures. Do you want to overwrite/merge it with a new download? "$ENDCOLOR;
		read OVERWRITEART

		if [[ $OVERWRITEART = 'y' || $OVERWRITEART = 'Y' ]] ; then
			rm /root/Pictures/Solid-Art/archive.zip
			cd /root/Pictures/Solid-Art
			wget http://solidoptionos.com/pics/archive.zip
			echo -e $GREEN"Done."$ENDCOLOR;
			echo ""
			sleep 0.5

			echo -e $BLUE"Extracting.."$ENDCOLOR;
			sleep 1
			unzip archive.zip
			echo -e $GREEN"Done."$ENDCOLOR;
			echo ""
			sleep 0.5

			echo -e $BLUE"Cleaning up.."$ENDCOLOR;
			sleep 1
			rm -rf __MACOSX/
			cp -rf hacker_wallpaper/ .
			rm -rf hacker_wallpaper/
			cp -rf epic-grunge-wall-texture-by-GR/ .
			rm -rf epic-grunge-wall-texture-by-GR/
			rm *.psd
			rm *.pdf
			rm *.ai
			chmod -R 777 *
			echo ""
			echo -e $GREEN"Success! Solid-Art has been updated to the latest version. "$ENDCOLOR;
			sleep 1
		else
			echo -e $BLUE"Okay. Skipping."$ENDCOLOR;
			echo ""
			sleep 1
		fi
        fi
else
	echo -e $BLUE"Okay. Maybe later."$ENDCOLOR;
	echo ""
fi

echo -e $YELLOW"Replace default backgrounds with Solid-Art?"$ENDCOLOR;
read CHANGEDEFAULT
echo ""

if [[ $CHANGEDEFAULT = 'y' || $CHANGEDEFAULT = 'Y' ]] ; then

	echo -e $BLUE"Backing up originals.."$ENDCOLOR;
	sleep 0.5
	
	if [[ ! -e /usr/share/images/desktop-base/backup ]] ; then
		mkdir /usr/share/images/desktop-base/backup
	fi
	
	cp /usr/share/images/desktop-base/* /usr/share/images/desktop-base/backup/
	
	if [[ ! -e /usr/share/gnome-shell/theme/backup ]] ; then
		mkdir /usr/share/gnome-shell/theme/backup
	fi

	mv /usr/share/gnome-shell/themes/KaliLogin.png /usr/share/gnome-shell/themes/backup/KaliLogin.png.bak
	echo -e $GREEN"Done."$ENDCOLOR;
	echo ""
	sleep 1

	echo -e $BLUE"Replacing default wallpapers and login screens.."$ENDCOLOR;
	cp /root/Pictures/Solid-Art/* /usr/share/images/desktop-base/
	cp /root/Pictures/Solid-Art/login-background.png /usr/share/gnome-shell/themes/KaliLogin.png
	echo ""
	echo -e $GREEN"Success! Default backgrounds replace with Solid-Art."$ENDCOLOR;
	sleep 1
	echo ""

else

	echo -e $BLUE"Okay. Maybe some other time."$ENDCOLOR;
	echo ""

fi

echo -e $YELLOW"Would you like to upgrade your htop style? [y/n]"$ENDCOLOR;
read HTOPUPGRADE
echo ""

if [[ $HTOPUPGRADE = 'y' || $HTOPUPGRADE = 'Y' ]] ; then

	echo -e $BLUE"Upgrading htop style.."$ENDCOLOR;
	mkdir -p ~/.config/htop	
	if [[ ! -e /root/.config/htop ]] ; then
		mkdir /root/.config/htop
	fi

	cp /root/optionZ3ro/configs/htoprc /root/.config/htop/htoprc
	echo ""
	echo -e $GREEN"Success! Htop style upgraded."$ENDCOLOR;
	echo ""
	sleep 1

else

	echo -e $BLUE"Okay. Maybe later."$ENDCOLOR; 
	echo ""

fi

echo -e $YELLOW"Do you want to install linux-kernel-4.2.3 - not recommended for virtual macines? [y/n]"$ENDCOLOR;
read INSTALLKERNEL
echo ""
if [[ $INSTALLKERNEL = 'y' || $INSTALLKERNEL = 'Y' ]] ; then

	echo -e $BLUE"Downloading kernel 4.2.3.."$ENDCOLOR;
	
	if [[ ! -e /tmp ]] ; then
		mkdir /tmp
	fi

	cd /tmp
	
	if [[ ! -e linux-headers-4.2.3-040203_4.2.3-040203.201510030832_all.deb ]] ; then
		wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.2.3-unstable/linux-headers-4.2.3-040203_4.2.3-040203.201510030832_all.deb
	fi

	if [[ ! -e linux-headers-4.2.3-040203-generic_4.2.3-040203.201510030832_amd64.deb ]] ; then
		wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.2.3-unstable/linux-headers-4.2.3-040203-generic_4.2.3-040203.201510030832_amd64.deb
	fi

	if [[ ! -e linux-image-4.2.3-040203-generic_4.2.3-040203.201510030832_amd64.deb ]] ; then
		wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.2.3-unstable/linux-image-4.2.3-040203-generic_4.2.3-040203.201510030832_amd64.deb
	fi
	
	echo -e $GREEN"Done."$ENDCOLOR;
	echo ""
	sleep 0.5

	echo -e $BLUE"Installing linux-headers-4.2.3 and linux-image-4.2.3.."$ENDCOLOR;
	sudo dpkg -i linux-headers-4.2.3*.deb linux-image-4.2.3*.deb
	echo -e $GREEN"Done"$ENDCOLOR;
	echo ""
	sleep 0.5

	echo -e $BLUE"Cleaning up after install.."$ENDCOLOR;
	rm /tmp/*.deb
	echo -e $GREEN"Done."$ENDCOLOR;
	echo ""
	sleep 0.5

	echo -e $GREEN"Success! Kernel 4.2.3 installed and will be available after reboot."$ENDCOLOR;
	echo ""
	sleep 1
else
	echo -e $BLUE"Okay. Maybe another time."$ENDCOLOR;
	echo ""
fi

echo -e $BLUE"Updating airodump-ng manufacturer data.."$ENDCOLOR;
airodump-ng-oui-update
echo -e $GREEN"Airodump-ng manufacturer data updated."$ENDCOLOR;
echo ""
sleep 1

echo -e $BLUE"Wrapping up the post install with necessary updates.."$ENDCOLOR;
echo ""
sleep 1

echo -e $BLUE"[update-usbids]"$ENDCOLOR;
sleep 0.5
update-usbids
echo -e $GREEN"Done."$ENDCOLOR;
echo ""
sleep 0.5

echo -e $BLUE"[update-pciids]"$ENDCOLOR;
sleep 0.5
update-pciids
echo -e $GREEN"Done."$ENDCOLOR;
echo ""
sleep 0.5

echo -e $BLUE"[update-menus]"$ENDCOLOR;
sleep 0.5
update-menus
echo -e $GREEN"Done."$ENDCOLOR;
echo ""
sleep 0.5

echo -e $BLUE"[update-initramfs -uv]"$ENDCOLOR;
sleep 0.5
update-initramfs -uv
echo -e $GREEN"Done."$ENDCOLOR;
echo ""
sleep 0.5

echo -e $BLUE"[update-grub]"$ENDCOLOR;
sleep 0.5
update-grub
echo -e $GREEN"Done."$ENDCOLOR;
echo ""
sleep 0.5

echo -e $BLUE"[update-grub2]"$ENDCOLOR;
sleep 0.5
update-grub2
echo -e $GREEN"Done."$ENDCOLOR;
echo "" 
sleep 0.5

echo -e $BLUE"Syncing.."$ENDCOLOR;
sleep 0.5
sync
echo -e $GREEN"Done."$ENDCOLOR;
echo ""
sleep 0.5

sleep 0.5
echo -e $GREEN"Wrap up complete."$ENDCOLOR;
echo ""
sleep 1

clear
echo -e $BLUE"#################################"$ENDCOLOR;
echo -e $YELLOW"#      Operation Complete.       #"$ENDCOLOR;
echo -e $BLUE"#################################"$ENDCOLOR;
echo ""
echo -e $YELLOW"Some updates require you to reboot your system to take effect."$ENDCOLOR;
echo ""
echo -e $YELLOW"Would you like to reboot now? "$ENDCOLOR;
read REBOOTING

if [[ $REBOOTING = 'y' || $REBOOTING = 'Y' ]] ; then 

	echo -e $GREEN"Will reboot in a few seconds.  BTW - If you recommend SolidOptionOS to a friend and they purchase a drive.."$ENDCOLOR;
	sleep 1
	echo -e $GREEN"We will send you a FREE GIFT!"$ENDCOLOR;
	sleep 1
	reboot
else

	echo -e $BLUE"Okay.  Kernel 4.3.2 will be available upon next reboot.  Goodbye."$ENDCOLOR;

fi
